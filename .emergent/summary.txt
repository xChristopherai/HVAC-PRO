<analysis>
The AI engineer has skillfully navigated the development of the HVAC Assistant application through several complex phases, demonstrating a strong ability to build, refine, and debug a full-stack application iteratively. Starting from Phase 5 (Settings), the work progressed through implementing an AI Voice Scheduling backend and a client-facing Calls dashboard in Phase 6. Phase 7 introduced critical backend logic for QA gates and subcontractor holdbacks, which was then extended with a comprehensive frontend dashboard. Phase 8 focused on automated owner weekly summary SMS reports, evolving from a backend-only feature to a full-fledged Owner Scorecard UI with plain-English metrics. Significant attention was given to integrating real financial data from Phase 7 into the reports and ensuring bulletproof currency formatting on the frontend. The current task is an accessibility improvement, focusing on a global UI fix to eliminate all white text, which involves extensive CSS and component auditing and refactoring.
</analysis>

<product_requirements>
The goal is to develop an AI-powered HVAC business management platform with an SMS receptionist, operations management, and owner analytics. The project involves phased development:
- **Phase 1-4**: AI SMS Receptionist, Admin Portal, Owner Insights, UI Redesign (to PayPal-style), AI Voice Scheduling, Dashboard KPIs, Quick Actions, Customers/Appointments/Technicians/Messaging lists with search and add functionalities.
- **Phase 5 (Settings)**: Comprehensive settings panel for Business, AI Assistant, SMS, Calendar, Notifications, Billing, Service Areas, Integrations, all persisting data via a unified  endpoint, with mock API keys.
- **Phase 6 (Voice & SMS)**: Implement  for AI Voice Scheduling (greet → collect details → appointment creation → SMS confirm). Introduce a Call Log (later Calls) page () with search (client name, phone), date filters, AI vs Human filters, lead tech transfers, call transcripts, stats, and a detail drawer.
- **Phase 7 (QA Gates & Subcontractor Holdback)**: Implement hard blocks for job closure (microns < 500, photos, warranty, inspection) and 10% subcontractor payment holdbacks until QA/warranty/inspection pass. Frontend () includes status cards, jobs table, detail drawer with blocking reasons/photos, and sidebar controls for holdback percentage and QA toggles.
- **Phase 8 (Owner Weekly Summary SMS)**: Backend generates a one-line SMS summary (mocked if Twilio is disabled) via . Frontend () displays an SMS preview, trigger button, KPI strip (calls, AI success, QA passes, potential revenue, holdback released), and history. This was later simplified to a plain-English Owner Scorecard with 5 large tiles, a single-line SMS preview, and a simplified history. The backend was updated to populate  and  from real Phase 7 data and ensure numerical responses. Frontend currency formatting was made robust.
- **UI Fix: Ban White Text App-Wide**: Eliminate all white (/) text across the application, replacing it with dark text tokens for accessibility.
</product_requirements>

<key_technical_concepts>
- Full-stack Development: React (Frontend), FastAPI (Backend)
- Database: MongoDB (using UUIDs for IDs)
- Styling: Tailwind CSS, Shadcn/ui
- External Integrations: Twilio (mocked), Google Calendar (mocked), OpenAI (via Emergent LLM Key), mocked Stripe/QuickBooks
- Authentication: JWT, HTTP-only cookies (re-enabled as needed)
- Process Management: Supervisorctl
</key_technical_concepts>

<code_architecture>
The application uses a standard full-stack architecture with separate  and  directories.

**Detailed Directory Structure:**


**Key Files and Changes:**
-   : The core FastAPI application.
    -   **Importance**: Handles all API endpoints, authentication, and business logic.
    -   **Changes**: Extensively updated for Phase 5 settings (), Phase 6 voice webhook and call logging (, ), Phase 7 QA gates (, ), and Phase 8 reporting (). Enhanced to ensure financial fields are numerical and SMS composition is in plain English.
-   : Defines MongoDB data models.
    -   **Importance**: Structures all data stored in MongoDB.
    -   **Changes**: Added models/fields for  (transcript, status, AI confidence),  (microns, photos, warranty), and  (amount, status) to support new features.
-   : Contains mock services and utility functions.
    -   **Importance**: Provides business logic and mock external integrations.
    -   **Changes**: Added , , , , , ,  and other functions for the new phases.
-   : The main React application and routing hub.
    -   **Importance**: Orchestrates application flow and component rendering.
    -   **Changes**: Updated to include routes and navigation links for , , and  components.
-   : Global and component-level styles.
    -   **Importance**: Defines the application's visual theme.
    -   **Changes**: Currently being modified to define global dark text tokens (, , ) and apply them to the  as part of the Ban White Text App-Wide fix.
-   : The comprehensive settings panel.
    -   **Importance**: Allows owners to configure business and AI settings.
    -   **Changes**: Completely rewritten for Phase 5 to support all settings tabs and backend persistence.
-   : (New file)
    -   **Importance**: Implements the refined Call Log dashboard for Phase 6.
    -   **Changes**: Created to display call data with search, filters, stats, table, and a detail drawer.
-   : (New file)
    -   **Importance**: Implements the owner dashboard for Phase 7 QA Gates and Holdback controls.
    -   **Changes**: Created to show QA status cards, a jobs table, a drawer with blocking reasons, and sidebar controls.
-   : (New file)
    -   **Importance**: Implements the owner weekly summary reports dashboard for Phase 8.
    -   **Changes**: Created, then modified to simplify the UI to an Owner Scorecard format with plain-English metrics, integrated with real holdback data, and uses  for currency.
-   : Utility functions.
    -   **Importance**: Provides reusable helper functions.
    -   **Changes**: Added the  utility function for consistent currency formatting.
</code_architecture>

<pending_tasks>
- **Production Deployment Fix**: Resolve platform-level routing issues preventing the app from working on the production URL.
- **Re-enable Full Authentication**: Re-enable authentication for all dashboard endpoints.
- **Complete Phase 3 Roadmap**: Implement Stripe/PayPal payments, QuickBooks/Xero integration, advanced calendar features, enhanced notifications, and mobile optimization.
- **Twilio Integration**: Integrate with real Twilio credentials (replacing mock adapters).
- **UI Fix: Ban White Text App-Wide**: Complete the audit and replacement of all white text in frontend components.
- **Lint/Guard**: Implement a style lint rule that fails on  or  in .
</pending_tasks>

<current_work>
The AI engineer is currently addressing a **UI Fix: Ban White Text App-Wide**. This is an accessibility task to ensure no white (/) font is present anywhere in the application.

The work completed so far includes:
1.  **Auditing**: Initial  commands were performed to identify existing occurrences of , , and  in both  and React components.
2.  **Global CSS Update**: The file  has been modified to define new dark text CSS variables (, , ) and apply  to the global  element.
The engineer has also prepared to fix individual React components.
</current_work>

<optional_next_step>
Continue fixing all React components by replacing  and other white text instances with the new dark text tokens.
</optional_next_step>
